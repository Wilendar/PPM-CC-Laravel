# PPM-CC-Laravel Frontend Deployment Script
# Autor: Frontend Specialist Agent
# Data: 2025-01-08
# Opis: Script do deployment frontend stack (TailwindCSS + Alpine.js + Vite) na serwerze Hostido

param(
    [switch]$Production = $false,
    [switch]$DevMode = $false,
    [switch]$TestOnly = $false
)

# Kolory dla lepszej czytelno≈õci
$Host.UI.RawUI.BackgroundColor = "Black"
$Host.UI.RawUI.ForegroundColor = "White"
Clear-Host

Write-Host "üöÄ PPM-CC-Laravel Frontend Deployment" -ForegroundColor Cyan
Write-Host "=======================================" -ForegroundColor Cyan

# Konfiguracja po≈ÇƒÖczenia SSH
$HostidoKey = "D:\OneDrive - MPP TRADE\SSH\Hostido\HostidoSSHNoPass.ppk"
$HostidoServer = "host379076@host379076.hostido.net.pl"
$HostidoPort = "64321"
$RemotePath = "domains/ppm.mpptrade.pl/public_html"

# Funkcja do wykonywania polece≈Ñ SSH
function Invoke-HostidoCommand {
    param(
        [string]$Command,
        [string]$Description = "Wykonywanie polecenia"
    )
    
    Write-Host "üìã $Description..." -ForegroundColor Yellow
    $result = plink -ssh $HostidoServer -P $HostidoPort -i $HostidoKey -batch "cd $RemotePath && $Command"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ $Description - sukces" -ForegroundColor Green
        return $result
    } else {
        Write-Host "‚ùå $Description - b≈ÇƒÖd" -ForegroundColor Red
        throw "B≈ÇƒÖd wykonania: $Command"
    }
}

# Funkcja testowania po≈ÇƒÖczenia
function Test-HostidoConnection {
    Write-Host "üîç Testowanie po≈ÇƒÖczenia SSH..." -ForegroundColor Yellow
    
    try {
        $phpVersion = Invoke-HostidoCommand "php -v | head -1" "Test po≈ÇƒÖczenia SSH"
        Write-Host "‚úÖ Po≈ÇƒÖczenie SSH OK - $phpVersion" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå B≈ÇƒÖd po≈ÇƒÖczenia SSH" -ForegroundColor Red
        return $false
    }
}

# Frontend Build Process
function Build-FrontendAssets {
    Write-Host "üèóÔ∏è Budowanie frontend assets..." -ForegroundColor Magenta
    
    # Sprawd≈∫ dependencies
    Invoke-HostidoCommand "npm list --depth=0 2>/dev/null || echo 'Dependencies check needed'" "Sprawdzanie dependencies"
    
    # Install/Update dependencies je≈õli potrzebne
    if ($DevMode) {
        Invoke-HostidoCommand "npm install" "Instalowanie dependencies (dev mode)"
    }
    
    # Sprawd≈∫ ≈∫r√≥d≈Çowe pliki
    $cssLines = Invoke-HostidoCommand "wc -l resources/css/app.css | awk '{print `$1}'" "Sprawdzanie app.css"
    $jsLines = Invoke-HostidoCommand "wc -l resources/js/app.js | awk '{print `$1}'" "Sprawdzanie app.js"
    
    Write-Host "üìÑ app.css: $cssLines linii" -ForegroundColor Blue
    Write-Host "üìÑ app.js: $jsLines linii" -ForegroundColor Blue
    
    if ([int]$cssLines -lt 10 -or [int]$jsLines -lt 10) {
        Write-Host "‚ö†Ô∏è ≈πr√≥d≈Çowe pliki wydajƒÖ siƒô puste!" -ForegroundColor Yellow
        if (-not $TestOnly) {
            $continue = Read-Host "Kontynuowaƒá? (y/N)"
            if ($continue -ne "y") { exit }
        }
    }
    
    # Production build
    Write-Host "üî® Uruchamianie npm run build..." -ForegroundColor Magenta
    $buildOutput = Invoke-HostidoCommand "npm run build" "Production build"
    
    # Sprawd≈∫ wygenerowane assets
    $assetFiles = Invoke-HostidoCommand "ls -la public/build/assets/ | grep -E '\\.css|\\.js'" "Sprawdzanie wygenerowanych assets"
    Write-Host "üì¶ Wygenerowane assets:" -ForegroundColor Blue
    Write-Host $assetFiles -ForegroundColor Gray
    
    return $true
}

# Test funkcjonalno≈õci
function Test-FrontendFunctionality {
    Write-Host "üß™ Testowanie funkcjonalno≈õci frontend..." -ForegroundColor Magenta
    
    # Test dostƒôpno≈õci strony
    try {
        $response = Invoke-WebRequest -Uri "https://ppm.mpptrade.pl" -TimeoutSec 10 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Strona g≈Ç√≥wna dostƒôpna" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ùå B≈ÇƒÖd dostƒôpu do strony g≈Ç√≥wnej" -ForegroundColor Red
    }
    
    # Test strony testowej (je≈õli istnieje)
    try {
        $testResponse = Invoke-WebRequest -Uri "https://ppm.mpptrade.pl/test-frontend" -TimeoutSec 10 -UseBasicParsing
        if ($testResponse.StatusCode -eq 200) {
            Write-Host "‚úÖ Strona testowa frontend dostƒôpna" -ForegroundColor Green
            
            # Sprawd≈∫ czy assets sƒÖ za≈Çadowane
            if ($testResponse.Content -match "text-3xl.*font-bold.*text-blue-600") {
                Write-Host "‚úÖ TailwindCSS klasy wykryte" -ForegroundColor Green
            }
            
            if ($testResponse.Content -match "x-data.*count.*0") {
                Write-Host "‚úÖ Alpine.js komponenty wykryte" -ForegroundColor Green
            }
        }
    } catch {
        Write-Host "‚ö†Ô∏è Strona testowa frontend niedostƒôpna (normalnie dla produkcji)" -ForegroundColor Yellow
    }
}

# Cleanup i optimizacja
function Optimize-Production {
    if ($Production) {
        Write-Host "üöÄ Optimizacja dla produkcji..." -ForegroundColor Magenta
        
        # Wyczy≈õƒá cache
        Invoke-HostidoCommand "php artisan config:clear" "Czyszczenie config cache"
        Invoke-HostidoCommand "php artisan route:clear" "Czyszczenie route cache" 
        Invoke-HostidoCommand "php artisan view:clear" "Czyszczenie view cache"
        
        # Cache dla produkcji
        Invoke-HostidoCommand "php artisan config:cache" "Tworzenie config cache"
        Invoke-HostidoCommand "php artisan route:cache" "Tworzenie route cache"
        
        # Sprawd≈∫ APP_DEBUG
        $debugSetting = Invoke-HostidoCommand "grep APP_DEBUG .env" "Sprawdzanie debug mode"
        if ($debugSetting -match "true") {
            Write-Host "‚ö†Ô∏è APP_DEBUG=true w produkcji!" -ForegroundColor Red
            Invoke-HostidoCommand "sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env" "Wy≈ÇƒÖczanie debug mode"
        }
        
        Write-Host "‚úÖ Optimizacja produkcyjna uko≈Ñczona" -ForegroundColor Green
    }
}

# Raport podsumowujƒÖcy
function Show-DeploymentReport {
    Write-Host "`nüìã RAPORT DEPLOYMENT" -ForegroundColor Cyan
    Write-Host "====================" -ForegroundColor Cyan
    
    # Informacje o ≈õrodowisku
    $phpVersion = Invoke-HostidoCommand "php -v | head -1" "PHP version"
    $laravelVersion = Invoke-HostidoCommand "php artisan --version" "Laravel version"
    
    Write-Host "üñ•Ô∏è  PHP: $phpVersion" -ForegroundColor Blue
    Write-Host "üöÄ Laravel: $laravelVersion" -ForegroundColor Blue
    
    # Informacje o assets
    $cssSize = Invoke-HostidoCommand "ls -lh public/build/assets/*.css | awk '{print `$5}'" "CSS size"
    $jsSize = Invoke-HostidoCommand "ls -lh public/build/assets/*.js | awk '{print `$5}'" "JS size"
    
    Write-Host "üìÑ CSS size: $cssSize" -ForegroundColor Blue
    Write-Host "üìÑ JS size: $jsSize" -ForegroundColor Blue
    
    # Status aplikacji
    Write-Host "`nüéØ FRONTEND STACK STATUS:" -ForegroundColor Green
    Write-Host "‚úÖ TailwindCSS 4.0 - Gotowy do u≈ºycia" -ForegroundColor Green
    Write-Host "‚úÖ Alpine.js 3.15 + plugins - Gotowy do u≈ºycia" -ForegroundColor Green
    Write-Host "‚úÖ Vite 7.x - Build system skonfigurowany" -ForegroundColor Green
    Write-Host "‚úÖ Livewire 3.6.4 - Integracja przygotowana" -ForegroundColor Green
    
    Write-Host "`nüåê Dostƒôpne URL:" -ForegroundColor Cyan
    Write-Host "‚Ä¢ G≈Ç√≥wna: https://ppm.mpptrade.pl" -ForegroundColor White
    Write-Host "‚Ä¢ Dashboard: https://ppm.mpptrade.pl/dashboard" -ForegroundColor White
    
    if (-not $Production) {
        Write-Host "‚Ä¢ Test frontend: https://ppm.mpptrade.pl/test-frontend" -ForegroundColor Yellow
    }
}

# MAIN EXECUTION
try {
    # Test po≈ÇƒÖczenia
    if (-not (Test-HostidoConnection)) {
        throw "Nie mo≈ºna nawiƒÖzaƒá po≈ÇƒÖczenia SSH"
    }
    
    # Build assets (tylko je≈õli nie test-only)
    if (-not $TestOnly) {
        Build-FrontendAssets
    }
    
    # Test funkcjonalno≈õci
    Test-FrontendFunctionality
    
    # Optimizacja dla produkcji
    Optimize-Production
    
    # Raport
    Show-DeploymentReport
    
    Write-Host "`nüéâ DEPLOYMENT ZAKO≈ÉCZONY POMY≈öLNIE!" -ForegroundColor Green
    
} catch {
    Write-Host "`n‚ùå B≈ÅƒÑD DEPLOYMENT: $_" -ForegroundColor Red
    exit 1
}

# Opcje uruchomienia
Write-Host "`nüìã SPOS√ìB U≈ªYCIA:" -ForegroundColor Cyan
Write-Host "./hostido_frontend_deploy.ps1                 # Standardowy deploy" -ForegroundColor White
Write-Host "./hostido_frontend_deploy.ps1 -Production     # Deploy produkcyjny" -ForegroundColor White  
Write-Host "./hostido_frontend_deploy.ps1 -DevMode        # Deploy rozwojowy" -ForegroundColor White
Write-Host "./hostido_frontend_deploy.ps1 -TestOnly       # Tylko testy" -ForegroundColor White